---
- name: Generate join commands for new nodes
  hosts: apiserver
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
    control_plane_host: null

  tasks:
    # finding a working apiserver node is necessary because we can't use apiserver[0] because it could be a new node.
    - name: Find a ready apiserver node for generating new join commands
      ansible.builtin.shell:
        cmd: >
          kubectl get node {{ item }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}{.metadata.labels.node-role.kubernetes.io/control-plane}'
      register: node_status
      delegate_to: "{{ item }}"
      changed_when: false
      no_log: true
      failed_when: false
      loop: "{{ groups['apiserver'] }}"
      when: control_plane_host is none

    - name: Set apiserver host
      set_fact:
        control_plane_host: "{{ item.item }}"
      loop: "{{ node_status.results }}"
      no_log: true
      when:
        - item.stdout is defined
        - item.stdout == "True"
        - control_plane_host is none
      run_once: true # only needs to succeed once. We only need one ready apiserver node for this.

    - name: Show selected apiserver host
      debug:
        msg: "Selected apiserver host: {{ control_plane_host }}"
      when: control_plane_host is not none

    - block:
        - name: Create a new token and print the join command for worker nodes
          ansible.builtin.shell:
            cmd: kubeadm token create --print-join-command
          register: worker_join_command
          become: true
          delegate_to: "{{ control_plane_host }}"

        - name: Save worker node join command to file
          copy:
            content: "{{ worker_join_command.stdout }}"
            dest: "tmp/{{ cluster_name }}/worker_join_command.sh"
          delegate_to: localhost

        - name: Deploy kubeadm config file
          ansible.builtin.template:
            src: helpers/kubeadm_cp_config.yaml.j2
            dest: "~/kubeadm-config.yaml"
          delegate_to: "{{ control_plane_host }}"

        - name: Re-upload certificates and generate a new certificate key
          ansible.builtin.shell:
            cmd: "kubeadm init phase upload-certs --upload-certs --config {{ cluster_config.ssh.ssh_home }}/kubeadm-config.yaml"
          register: upload_certs_output
          become: true
          delegate_to: "{{ control_plane_host }}"

        - name: Extract the certificate key from the output
          set_fact:
            certificate_key: "{{ upload_certs_output.stdout | regex_search('Using certificate key:\\s*([a-f0-9]+)', '\\1') | first }}"
          delegate_to: localhost

        - name: Save apiserver join command to file
          copy:
            content: "{{ worker_join_command.stdout }} --control-plane --certificate-key {{ certificate_key }}"
            dest: "tmp/{{ cluster_name }}/control_plane_join_command.sh"
          delegate_to: localhost

        - name: Remove kubeadm-config.yaml
          ansible.builtin.file:
            path: "{{ cluster_config.ssh.ssh_home }}/kubeadm-config.yaml"
            state: absent
          become: true

      when: control_plane_host is not none
      run_once: true
