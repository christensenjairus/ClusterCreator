- name: Move kubeconfig to user home
  hosts: apiserver[0]
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tags:
    - move_kubeconfig_remote
  tasks:
    - name: Ensure .kube exists in ssh users' account
      ansible.builtin.file:
        path: "{{ cluster_config.ssh.ssh_home }}/.kube"
        state: directory
        mode: '0700'
        owner: "{{ cluster_config.ssh.ssh_user }}"
        group: "{{ cluster_config.ssh.ssh_user }}"
      become: false
    - name: Configure .kube/config files in user home
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ cluster_config.ssh.ssh_home }}/.kube/config"
        remote_src: yes
        owner: "{{ cluster_config.ssh.ssh_user }}"
        group: "{{ cluster_config.ssh.ssh_user }}"
        mode: '0700'
      become: true

- name: Ensure ~/.kube/exists locally
  hosts: localhost
  gather_facts: false
  tags:
    - move_kubeconfig_local
  tasks:
    - name: Ensure .kube exists in ssh users' account
      ansible.builtin.file:
        path: "{{ lookup('env', 'HOME') }}/.kube/"
        state: directory
        mode: '0700'
- name: Fetch Kubernetes config file to local machine
  hosts: apiserver[0]
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tags:
    - move_kubeconfig_local
  tasks:
    - name: Fetch Kube config from the first apiserver server
      ansible.builtin.fetch:
        src: "{{ cluster_config.ssh.ssh_home }}/.kube/config"
        dest: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
        flat: yes
      become: false  # Ensure this is correctly set based on your needs
      run_once: true

- name: Run local kubectl commands and configure kubeconfig
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    cluster_config: "{{ lookup('file', 'tmp/{{ cluster_name }}/cluster_config.json') | from_json }}"
  tags:
    - rename_kubeconfig_context
  tasks:
    - name: Check if the kubectl context needs renaming
      ansible.builtin.shell:
        cmd: kubectl config get-contexts -o name
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
      register: kubectl_contexts
      changed_when: false
      ignore_errors: yes
    - name: Rename kubectl context
      ansible.builtin.command:
        cmd: kubectl config rename-context kubernetes-admin@{{ cluster_config.cluster_name }} {{ cluster_config.cluster_name }}
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
      when:
        - "'kubernetes-admin@' + cluster_config.cluster_name in kubectl_contexts.stdout"
        - cluster_config.cluster_name + ' not in kubectl_contexts.stdout'
    - name: Replace kubernetes-admin username in kubeconfig
      ansible.builtin.replace:
        path: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
        regexp: "kubernetes-admin"
        replace: "{{ cluster_config.cluster_name }}-admin"
    - name: Set the new API server address (adding brackets for IPv6)
      set_fact:
        new_vip: >-
          {{ '[' + cluster_config.networking.kube_vip.vip + ']' if cluster_config.networking.kube_vip.use_ipv6 else cluster_config.networking.kube_vip.vip }}
    - name: Replace API server address in kubeconfig
      ansible.builtin.replace:
        path: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
        regexp: "{{ cluster_config.networking.kube_vip.vip_hostname }}"
        replace: "{{ new_vip }}"
    - name: Set the current context to the new cluster name
      ansible.builtin.command:
        cmd: kubectl config use-context {{ cluster_config.cluster_name }}
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
    - name: "'kubectl get nodes' from machine running ansible to verify kubeconfig has been set up correctly"
      ansible.builtin.command:
        cmd: kubectl get nodes
      environment:
        KUBECONFIG: "{{ lookup('env', 'HOME') }}/.kube/{{ cluster_config.kubeconfig_file_name }}"
      register: kubectl_output
    - name: Show kubectl get nodes output
      ansible.builtin.debug:
        var: kubectl_output.stdout_lines

- name: Ensure KUBECONFIG line is in shell profile
  hosts: localhost
  tasks:
    - name: Determine if .bashrc or .zshrc exists
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - "{{ ansible_env.HOME }}/.bashrc"
        - "{{ ansible_env.HOME }}/.zshrc"
      register: profile_files

    - name: Set shell profile path based on existence
      set_fact:
        profile_path: "{{ item.stat.path }}"
      when: item.stat.exists
      loop: "{{ profile_files.results }}"

    - name: Add KUBECONFIG line to shell profile if not present
      ansible.builtin.lineinfile:
        path: "{{ profile_path }}"
        line: "export KUBECONFIG=$(find ~/.kube \\( -name '*.yaml' -o -name '*.yml' \\) -print0 | xargs -0 echo | tr ' ' ':')"
        state: present
        insertafter: EOF
      when: profile_path is defined
      register: profile_update

    - name: Display message if KUBECONFIG line was added
      ansible.builtin.debug:
        msg: "KUBECONFIG line added to {{ profile_path }}"
      when: profile_update.changed
