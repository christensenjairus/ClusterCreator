---
- name: Upgrade Kubernetes Packages
  hosts: all
  become: true

  tasks:
    - name: End playbook for etcd hosts
      ansible.builtin.meta: end_host
      when: "'etcd' in groups and 'etcd' in group_names"

    - name: Create directory for apt keyrings
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Install GPG if not installed
      ansible.builtin.apt:
        name: gpg
        state: present
        update_cache: true

    - name: Remove old Kubernetes apt key and sources list
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        - /etc/apt/sources.list.d/kubernetes.list

    - name: Add Kubernetes apt repository key
      ansible.builtin.shell: |
        curl -fsSL "https://pkgs.k8s.io/core:/stable:/v{{ KUBERNETES_SHORT_VERSION }}/deb/Release.key" |
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ KUBERNETES_SHORT_VERSION }}/deb/ /"
        state: present
        filename: "kubernetes"

    - name: Unhold kubelet, kubeadm, kubectl, and helm packages
      ansible.builtin.command: "sudo apt-mark unhold {{ item }}"
      loop:
        - kubelet
        - kubeadm
        - kubectl
        - helm
      register: unhold_result
      until: unhold_result is succeeded

    - name: Update package list
      ansible.builtin.apt:
        update_cache: yes

    - name: Install specific versions of kubelet, kubeadm, kubectl, and helm
      ansible.builtin.apt:
        name:
          - "kubelet={{ KUBERNETES_LONG_VERSION }}"
          - "kubeadm={{ KUBERNETES_LONG_VERSION }}"
          - "kubectl={{ KUBERNETES_LONG_VERSION }}"
          - "helm={{ HELM_VERSION }}"
        state: present

    - name: Hold kubelet, kubeadm, kubectl, and helm packages
      ansible.builtin.command: "sudo apt-mark hold {{ item }}"
      loop:
        - kubelet
        - kubeadm
        - kubectl
        - helm
      register: hold_result
      until: hold_result is succeeded

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Restart kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: restarted

    - name: Plan Kubeadm Upgrade (apiservers only)
      ansible.builtin.shell:
        cmd: >
          kubeadm upgrade plan v{{ KUBERNETES_MEDIUM_VERSION }}
      when: "'apiserver' in group_names"
      ignore_errors: true
      delegate_to: "{{ inventory_hostname }}"
      register: plan_output

    - name: Show plan output (apiservers only)
      when: "'apiserver' in group_names"
      ansible.builtin.debug:
        msg: "{{ plan_output.stdout.splitlines() }}"

    - name: Confirm to continue (apiservers only)
      ansible.builtin.pause:
        prompt: "Do you want to continue upgrading the k8s cluster version? (yes/no)"
      register: user_confirmation
      when: "'apiserver' in group_names"

    - name: Fail if user did not confirm (apiservers only)
      ansible.builtin.fail:
        msg: "User chose not to continue."
      when: "'apiserver' in group_names and user_confirmation.user_input | lower != 'yes'"

    - name: Upgrade Kubeadm (apiservers only)
      ansible.builtin.shell:
        cmd: >
          # K8s documentation recommends this step
          killall -s SIGTERM kube-apiserver # trigger a graceful kube-apiserver shutdown
          sleep 20 # wait a little bit to permit completing in-flight requests
          
          kubeadm upgrade apply v{{ KUBERNETES_MEDIUM_VERSION }} -y
      when: "'apiserver' in group_names"
      ignore_errors: true
      delegate_to: "{{ inventory_hostname }}"
      register: upgrade_output

    - name: Show upgrade output (apiservers only)
      when: "'apiserver' in group_names"
      ansible.builtin.debug:
        msg: "{{ upgrade_output.stdout.splitlines() }}"

    - name: Upgrade Kubeadm (workers only)
      ansible.builtin.shell:
        cmd: >
          kubeadm upgrade node
      when: "'apiserver' not in group_names"
      ignore_errors: true

    - name: Reload systemd daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Restart kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: restarted

- name: Full APT Update
  hosts: all
  become: true

  tasks:
    - name: Update apt cache
      become: true
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600  # Cache is considered valid for 1 hour
      register: upgrade_result
      until: upgrade_result is succeeded
      retries: 30
      delay: 10
    - name: Upgrade all packages to the latest version
      become: true
      ansible.builtin.apt:
        upgrade: 'full'  # Use 'dist' for distribution upgrade, or 'full' for full upgrade
        force_apt_get: yes  # Optionally force using apt-get instead of aptitude
      register: upgrade_result
      until: upgrade_result is succeeded
      retries: 30
      delay: 10
    - name: Remove unused packages and dependencies
      become: true
      ansible.builtin.apt:
        autoremove: yes
        purge: yes
      register: upgrade_result
      until: upgrade_result is succeeded
      retries: 30
      delay: 10
    - name: Clean up apt cache
      become: true
      ansible.builtin.apt:
        autoclean: yes
      register: upgrade_result
      until: upgrade_result is succeeded
      retries: 30
      delay: 10
    - name: Check if reboot is required
      become: true
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required
    - name: Reboot the node (if necessary)
      become: true
      ansible.builtin.reboot:
        msg: "Rebooting because updates require a reboot"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when:
        - reboot_required.stat.exists

    - name: Wait for node to be reachable again
      ansible.builtin.wait_for_connection:
        delay: 5
        timeout: 300
      when:
        - reboot_required.stat.exists
